Dados Extraidos:
id X
genre_ids X
title X
release_date X
popularity X
vote_average X
vote_count X
budget X
revenue X
runtime  X
original_title X
orignal_language X
production_companys X
status X
director X 
overview 
backdrop_path e poster_path 

lf = pl.read_parquet("/home/pedro/Pipeline ETL movies/filmes_tmdb_completos.parquet")
print(lf.schema)
#print(verificar_qualidades_dados_lazy(lf))
print(tratar_dados_lazy(lf))
#print(verifiar_qualidades_dados_lazy(lf))












#df = pl.read_parquet("/home/pedro/Pipeline ETL movies/filmes_tmdb_completos.parquet")
# print(df.head())
# print(df.schema)
# Verificar linhas duplicadas
# dup = df.filter(df.is_duplicated())
# print(dup)

# lf = pl.read_parquet("/home/pedro/Pipeline ETL movies/filmes_tmdb_completos.parquet")
# lf_tratado = tratar_erros_dados_lazy()
# verificação = verificar_qualidades_dados_lazy(lf)

# Verificação antes de usar a chave
if TMDB_API_KEY is None:
    raise EnvironmentError("A variável de ambiente TMDB_API_KEY não está definida.")


# genero =  mapeamento_genero(TMDB_API_KEY)

# df = lf.with_columns(
#   pl.col("genre_ids").map_elements(
#        lambda ids: [genero.get(id, "Desconhecido") for id in ids]
#    ).alias("gêneros")
# )
# print(df.select(["title", "genre_ids", "gêneros"]).head())
